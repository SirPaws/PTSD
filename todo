
generic versions of:
    list:     doubly-linked list
    set:      math set
    hash_map: hash map


a flag for each like we have with stretchy buffer:
int *p_set    set;
int *hash_map hash_map;
int *p_list   set;

set:
    pCreateSet(data_type, compare_function, allocator, value) -> data_type*:
        int *set = pCreateSet(int, cmp, cb, ({1, 2, 3, 4, 5}));
        
    pSize(set) -> usize:
        int num_elements = pSize(set);

    pContains(set, value) -> pBool:
        pBool result = pContains(set, 5);



hash_map: âœ”
    pCreateHashMap(data_type, key_type, compare_function, allocator) -> data_type*:
        int *hash_map = pCreateHashMap(int, int, cmp, cb);

    pHashKey(hash_map, key) -> usize:
        int value = hash_map[pHashKey(hash_map, 55)];


    struct HashMapKey {
        key_type key;
        usize index;
    }
    struct HashMapMeta {
        HashMapKey *keys[num_buckets];
        usize endofstorage;
    } data ... 

list:
    pCreateList(data_type, allocator) -> data_type*:
        int *list = pCreateList(int, cb);
    
    pNext(list) -> data_type*:
        int *next = pNext(list);
    
    pPrev(list) -> data_type*:
        int *next = pPrev(list);

    
    pPush(list, value) -> data_type*:
        int *next = pPush(list, 5);
        assert(pPrev(next) == list);

    pInsert(list, value) -> data_type*:
        int *prev = pInsert(list, 5);
        assert(pNext(prev) == list);



